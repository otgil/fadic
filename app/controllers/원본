class PostsController < ApplicationController
  before_action :set_post, only: [:show, :edit, :update, :destroy]
  before_action :set_stars, except: [:show, :destroy]

  # GET /posts
  # GET /posts.json
  def index
    set_posts_and_star_with_criteria(params[:star], )
    @pagy, @posts = pagy(Post.search(params[:search]), items: 12)
    @company = Company.all
  
    respond_to do |format|
      format.html
      format.json {
        render json: { entries: render_to_string(partial: "posts", formats: [:html]), pagination: view_context.pagy_nav(@pagy) }
      }
    end
  end
  
  def search
    set_posts_and_star_with_criteria(params[:star], params[:order])
  end


  def index2
  end
  
  # GET /posts/1
  # GET /posts/1.json
  def show
  end
  

  # GET /posts/new
  def new
    @post = Post.new
  end

  # GET /posts/1/edit
  def edit
  end

  # POST /posts
  # POST /posts.json
  def create
    @post = Post.new(post_params)
    @company = Company.all

    respond_to do |format|
      if @post.save
        format.html { redirect_to @post, notice: 'Post was successfully created.' }
        format.json { render :show, status: :created, location: @post }
      else
        format.html { render :new }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /posts/1
  # PATCH/PUT /posts/1.json
  def update
    respond_to do |format|
      if @post.update(post_params)
        format.html { redirect_to @post, notice: 'Post was successfully updated.' }
        format.json { render :show, status: :ok, location: @post }
      else
        format.html { render :edit }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /posts/1
  # DELETE /posts/1.json
  def destroy
    @post.destroy
    respond_to do |format|
      format.html { redirect_to posts_url, notice: 'Post was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_post
      @post = Post.find(params[:id])
    end
    
    def set_stars
      @star = Star.all
    end
    
    

    # Only allow a list of trusted parameters through.
    def post_params
      params.require(:post).permit(:title, :content, star_ids: [])
    end
    
    def set_posts_and_star_with_criteria(requested_star, requested_order)
      if requested_star.nil? || requested_star.eql?('All')
        posts_by_star = Star.all
        @star_who = 'All'
      else
        posts_by_star = filter_post_by_star(requested_star)
        @star_who = requested_star
      end
      order_posts(requested_order, posts_by_star)
    end
    
    def filter_posts_by_order(star_who)
      @star = Star.find_by(who: star_who)
      stars = if @star.nil?
                Star.none
              else
                @star.posts
      end
    end
    
    def order_posts(_order, _posts)
      @posts = case _order
               when 'Hot views'
                _posts.order('title ASC')
               when 'Daily Rank'
                _posts.order('created_at ASC')
               when 'Weekly Rank'
                _posts.order('created_at ASC')
               when 'Event Date'
                _posts.order('title ASC')
               else
                _posts.order('created_at ASC')
      end
    end
end
